#include <bits/stdc++.h>
using namespace std;
struct dominoT {
    int leftDots;
    int rightDots;
};

bool FormsDominoChain(vector<dominoT> &dominos, vector<dominoT> &chain) {
    if (dominos.empty()) {
        for (int i = 0 ; i < chain.size() ; i++) {
            if(i==chain.size()-1){
                cout << chain[i].leftDots << "|" << chain[i].rightDots <<endl;
            }
            else
            cout << chain[i].leftDots << "|" << chain[i].rightDots << " - ";

        }
        return true;
    }
    int chainRight ;
    if(chain.empty()){
        chainRight =  0;
    }
    else{
    chainRight = chain.back().rightDots;
    }
    for (int i = 0; i < dominos.size(); i++) {
        if (chainRight == 0 || dominos[i].leftDots ==chainRight) {
            dominoT dom = dominos[i];
            dominos.erase(dominos.begin()+i);
            chain.push_back(dom);
            if (FormsDominoChain(dominos, chain)) {
                return true;
            }
            chain.pop_back();
            dominos.insert(dominos.begin()+i,dom);
        }
    }
    return false;
}

int main() {
    int n;
    cin >> n;
    vector<dominoT> dominoSet(n);
   vector<dominoT> chain;
   for(int i = 0 ; i < n ; i ++ ){
    cin >> dominoSet[i].leftDots >> dominoSet[i].rightDots;
    }
    if (!FormsDominoChain(dominoSet, chain)) {
        cout << "can't make the chain "<< endl;
    }

    return 0;
}
